from typing import Self

import numpy as np

from manim import (BLACK, WHITE, ORANGE, PURPLE, YELLOW, PURE_BLUE, PURE_GREEN, PURE_RED,
                   IN, OUT, DOWN, LEFT, RIGHT, UP, ORIGIN,
                   PI, Square, Text, VGroup, ManimColor)
from manim.typing import Point3D

from instant_insanity.core.cube import FacePlane
from instant_insanity.core.puzzle import PuzzleCubeSpec, PuzzleCube, FaceColour

TEST_PUZZLE_CUBE_SPEC: PuzzleCubeSpec = 'RBOGYP' # Red, Blue, Orange, Green, Yellow, Purple

MANIM_COLOUR_MAP: dict[FaceColour, ManimColor] = {
    FaceColour.BLUE: PURE_BLUE,
    FaceColour.GREEN: PURE_GREEN,
    FaceColour.ORANGE: ORANGE,
    FaceColour.PURPLE: PURPLE,
    FaceColour.RED: PURE_RED,
    FaceColour.WHITE: WHITE,
    FaceColour.YELLOW: YELLOW
}

FACE_NORMAL: dict[FacePlane, Point3D] = {
    FacePlane.FRONT: OUT,
    FacePlane.BACK: IN,
    FacePlane.RIGHT: RIGHT,
    FacePlane.LEFT: LEFT,
    FacePlane.TOP: UP,
    FacePlane.BOTTOM: DOWN
}

OPPOSITE_FACES: list[tuple[FacePlane, FacePlane]] = [
    (FacePlane.LEFT, FacePlane.RIGHT),
    (FacePlane.BOTTOM, FacePlane.TOP),
    (FacePlane.BACK, FacePlane.FRONT)
    ]


class ColouredCube(VGroup):
    """A 3D cube with coloured faces."""
    puzzle_cube: PuzzleCube
    face_square: dict[FacePlane, Square]
    # front: Square
    # back: Square
    # right: Square
    # left: Square
    # top: Square
    # bottom: Square

    def __init__(
        self,
        side_length: float = 1.0,
        cube_spec: PuzzleCubeSpec = TEST_PUZZLE_CUBE_SPEC,
        **kwargs,
    ) -> None:
        self.side_length = side_length
        self.puzzle_cube = PuzzleCube(cube_spec) 
        super().__init__(
            **kwargs,
        )

    def generate_points(self) -> None:
        """
        Creates the sides of the cube.

        This method gets called by the __init__ method of Mobject.
        """

        # Create front face
        front: Square = Square(side_length=self.side_length, shade_in_3d=True)
        front = front.shift(OUT * self.side_length / 2)

        # Create and position other faces relative to the front
        back: Square = front.copy().rotate(PI, axis=UP, about_point=ORIGIN)

        top: Square = front.copy().rotate(PI / 2, axis=LEFT, about_point=ORIGIN)
        bottom: Square = front.copy().rotate(PI / 2, axis=RIGHT, about_point=ORIGIN)

        left: Square = front.copy().rotate(PI / 2, axis=DOWN, about_point=ORIGIN)
        right: Square = front.copy().rotate(PI / 2, axis=UP, about_point=ORIGIN)

        self.add(front, back, top, bottom, left, right)

        self.face_square = {
            FacePlane.FRONT: front,
            FacePlane.BACK: back,
            FacePlane.RIGHT: right,
            FacePlane.LEFT: left,
            FacePlane.TOP: top,
            FacePlane.BOTTOM: bottom
        }

    init_points = generate_points

    def init_colors(self, propagate_colors: bool = False) -> Self:

        """
        Initialize the colours of the cube.

        This method gets called by the __init__ method of Mobject.
        """

        # not sure what this accomplishes
        super().init_colors(propagate_colors)

        for face, colour_name in self.puzzle_cube.name_to_colour.items():
            face_square = self.face_square[face]
            face_square.set_fill(MANIM_COLOUR_MAP[colour_name], opacity=1.0)
            face_square.set_stroke(color=BLACK, width=1.0)

        return self
    
    def sort_faces(self, cam_pos: Point3D) -> Self:
        """
        Sorts the faces of the cube based on their z-index.

        This method is used to ensure that the faces are drawn in the correct order.

        Parameters
        ----------
        cam_pos : Point3D
            The position of the camera in 3D space.
        
        Returns
        -------
        Self
            The cube object with its faces sorted in the correct z-order.
        """
        face: Square
        for face in self:
            dist = np.linalg.norm(face.get_center() - cam_pos)
            face.z_index = -dist
        self.submobjects.sort(key=lambda mob: mob.z_index)
        return self

def add_face_labels(cube: ColouredCube) -> VGroup:
    """
    Add labels to each cube face, positioned and oriented in 3D.

    This code was generated by ChatGPT and is incorrect.
    The labels are not drawn in the correct z-order and do not move with the faces.
    Refer to the session titled "3D Axes in Manim" at https://chatgpt.com/share/6875aaf3-b378-8013-958a-0b61d0c6c79f
    """
    label_specs = [
        ("x", cube.face_square[FacePlane.FRONT], OUT),
        ("x'", cube.face_square[FacePlane.BACK], -OUT),
        ("y", cube.face_square[FacePlane.RIGHT], RIGHT),
        ("y'", cube.face_square[FacePlane.LEFT], LEFT),
        ("z", cube.face_square[FacePlane.TOP], UP),
        ("z'", cube.face_square[FacePlane.BOTTOM], DOWN),
    ]

    labels = VGroup()
    for text, face, normal in label_specs:
        label = Text(text, color=BLACK).scale(0.3)
        label.move_to(face.get_center())

        axis = np.cross([0, 0, 1], normal)
        if np.linalg.norm(axis) > 1e-6:
            label.rotate(PI / 2, axis=axis, about_point=label.get_center())

        labels.add(label)

    return labels